#include<stdio.h>
#include<stdlib.h>
#include<assert.h>

typedef struct 
{
    int Sp;
    int Cap;
    int* stack;

}Stack;

Stack* Stack_New(int n);
void Stack_Delete(Stack** p_this);
void Stack_Push(Stack* this, int Val);
int Stack_Pop(Stack* this);
int Stack_Peek(Stack* this);
int Stack_IsFull(Stack* this);
int Stack_IsEmpty(Stack* this);

int main()
{
    return 0;
}

Stack* Stack_New(int n){

    Stack* S = (Stack*) malloc(sizeof(Stack));
    if(S){
        S -> Sp = 0;
        S -> Cap = n;
        S -> stack = (int *) malloc (n*sizeof(int));

        if(!S->stack){
            free(S);
            S = NULL;
        }
    }
    return S;
}

void Stack_Delete(Stack** p_this){
    assert(*p_this);
    free((*p_this)->stack);
    free(*p_this);
    *p_this = NULL;
}

void Stack_Push(Stack* this, int Val){
    this->stack[this->Sp++]=Val;
    ++this->Sp;
}

int Stack_Pop(Stack* this){
    --this->Sp;
    return this->stack[--this->Sp];
}

int Stack_Peek(Stack* this){
    if(this->Sp == 0){
        return -1;
    }
    return this->stack[this->Sp-1];
}

int Stack_IsFull(Stack* this){
    return this->Sp == this->Cap;
}

int Stack_IsEmpty(Stack* this){
    return this->Sp == 0;
}