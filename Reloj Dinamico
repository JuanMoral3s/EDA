// CODIGO DEL RELOJ

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
typedef struct 
{
	int horas;
	int minutos;
	int segundos;
} Reloj;

Reloj* Crear( size_t tam)
{
    
Reloj* p = (Reloj*) malloc(tam * sizeof(Reloj));

return p;

}

void Destruir( Reloj** p)
{
    free(*p);
    *p = NULL;
}
void Reloj_Imprime( const Reloj* this ) 
{
	printf( "%02d:%02d:%02d\n", this->horas, this->minutos,this->segundos );
}

void Reloj_Poner( Reloj* this, int horas, int minutos, int segundos )
{
	this->horas = horas;
	this->minutos = minutos;
	this->segundos = segundos;
}

void Reloj_Incrementar( Reloj* this )
{
    ++this->segundos;
    if(this->segundos > 59){
        this->segundos = 0;
    
	++this->minutos;
	if( this->minutos > 59 )
   {
		this->minutos = 0;

		++this->horas;
		if( this->horas > 23 )
      { 
         this->horas = 0; 
      }
	}
}
}


void Reloj_Set_Horas(Reloj* this, int horas)
{
    this->horas = horas;
}
void Reloj_Set_Minutos(Reloj* this, int minutos)
{
    this->minutos = minutos;
}
void Reloj_Set_Segundos(Reloj* this, int segundos)
{
    this->segundos = segundos;
}

int Reloj_Get_Horas(Reloj* this)
{
    return this->horas;
}
int Reloj_Get_Minutos(Reloj* this)
{
    return this->minutos;
}

int Reloj_Get_Segundos(Reloj* this)
{
    return this->segundos;
}

bool Reloj_Comparar(Reloj* this, Reloj* other)
{
    return ((this->horas == other->horas) 
    && (this->minutos == other->minutos) 
    && (this->segundos == other->segundos));
}


int main()
{
 
 size_t n = 5;
 int hrs,min,seg;
 
 Reloj* relojes = Crear( n );
 
 if(NULL == relojes)
 {
    exit(1); 
 }
 
 for(int i = 0; i < n ; ++i)
 {
    Reloj_Poner( &relojes[i], 12, 0, 0); 
 }
 
 for(int i = 0; i < n ; ++i)
 {
    Reloj_Imprime( &relojes[i]);
 }

scanf("%ld", &n);
scanf("%d", &hrs);
scanf("%d", &min);
scanf("%d", &seg);

Reloj_Set_Segundos( &relojes[n] , seg);
Reloj_Set_Horas( &relojes[n] , hrs);
Reloj_Set_Minutos( &relojes[n] , min);
    
printf("%ld) %02d:%02d:%02d", n, Reloj_Get_Horas(&relojes[n]),
Reloj_Get_Minutos(&relojes[n]),Reloj_Get_Segundos(&relojes[n]));

Destruir( &relojes );

    
}
